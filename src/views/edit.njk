{% extends 'layouts/main.njk' %}
{% block head %}
<script>
    function appendSection() {
        var path = '/component/edit/section/' + $('#sections_container ol li').length;
        $.get(path, function(result) { 
            $('#sections_container ol').append(result); 
        });
    }
    function appendSectionElement(id) {
        var elementsKey = '#section_' + id + ' .elements';
        var path = '/component/edit/section/' + id + '/element/' + $(elementsKey + ' div').length;
        $.get(path, function(result) {
            $(elementsKey).append(result);
        });
    }

    function appendEvaluationSplits(name, key) {
        if (name == null || name == '') {
            name = '_';
        }
        var splitListToken = `#evaluation_exclusivity_${key}_split>ul`;
        var splitListElementCount = $(splitListToken + ' li').length;
        for (var j = splitListElementCount; j < 2; j++) {
            var splitKey = `${key}_${j}`;
            var path = `/component/edit/game/${name}/evaluation/${splitKey}`;
            $.get(path, function(result) {
                $(splitListToken).append(`<li>${result}</li>`);
            });
        }
    }

    function didChangeEvaluationTypeStateHandler(key) {
        var type = $(`#evaluation_type_${key} option:selected`).val();
        var evaluationScoreContainerToken = `#evaluation_exclusivity_${key}_scoring`;
        var evaluationSplitContainerToken = `#evaluation_exclusivity_${key}_split`;
        var selectToken = evaluationScoreContainerToken + ' select';
        var inputToken = evaluationScoreContainerToken + ' input';

        $(selectToken).attr('disabled', type == 'split' || type == 'exclusive');
        $(inputToken).attr('disabled', type == 'split' || type == 'exclusive');
        if (type == 'split' || type == 'exclusive') {
            $(evaluationScoreContainerToken).hide();
            $(evaluationSplitContainerToken).show();
        } else {
            $(evaluationScoreContainerToken).show();
            $(evaluationSplitContainerToken).hide();
        }
    }


    function didChangeEvaluationType(name, key) {
        didChangeEvaluationTypeStateHandler(key);
        var type = $(`#evaluation_type_${key} option:selected`).val();
        if (type == 'split' || type == 'exclusive') {
            appendEvaluationSplits(name, key);
        }
    }

    function didChangeQualifierType(key) {
        var type = $(`#evaluation_qualifier_${key} option:selected`).val();
        var handContainerToken = `#evaluation_qualifier_${key}_hand_container`;
        var rankContainerToken = `#evaluation_qualifier_${key}_ranklist_container`;
        var isRankQualifierEnabled = type == 'both' || type == 'lower_rank' || type == 'higher_rank';
        var isHandQualifierEnabled = type == 'both' || type == 'lower_hand' || type == 'higher_hand';
        
        if (isRankQualifierEnabled) {
            $(rankContainerToken).show();
        } else {
            $(rankContainerToken).hide();
        }

        if (isHandQualifierEnabled) {
            $(handContainerToken).show();
        } else {
            $(handContainerToken).hide();
        }
    }

    function didChangeValidationHandsEnabled(key) {
        var checked = $(`#evaluation_invalidationhands_enabled_${key}`).prop('checked');
        var containerToken = `#evaluation_invalidationhands_container_${key}`;
        var selectToken = containerToken + ' select';
        var inputToken = containerToken + ' input';
        $(selectToken).attr('disabled', !checked);
        $(inputToken).attr('disabled', !checked);
        if (checked) {
            $(containerToken).show();
        } else {
            $(containerToken).hide();
        }
    }

    function didChangeHandSize(key, section_index, element_index) {
        var target = $(`#${key}_value option:selected`).val();
        for (var j = $(`#${key}_value_option_container li`).length; j >= target; j--) {
            $(`#${key}_value_option_container li`).last().remove();
        }
        for (var i = $(`#${key}_value_option_container li`).length; i < target; i++) {
            $(`#${key}_value_option_container ul`).append(`<li><select name='section[${section_index}][elements][${element_index}][hand_size][${i}]'><option>1</option><option>2</option><option>3</option><option>4</option><option>5</option><option>6</option><option>7</option><option>8</option><option>9</option><option>10</option></select> cards</li>`);
        }
    }

    function nameForHand(value) {
        return {
            high: 'High',
            pair: 'Pair',
            two_pair: 'Two pair',
            three_of_a_kind: 'Three of a kind',
            straight: 'Straight',
            flush: 'Flush',
            full_house: 'Full house',
            four_of_a_kind: 'Four of a kind',
            straight_flush: 'Straight flush',
            royal_flush: 'Royal flush',
            five_of_a_kind: 'Five of a kind'
        }[value];
    }
    
    function removeInvalidationHand(context, hand, elementToken) {
        $(`#evaluation_qualifier_${context}_invalidation option[value="${hand}"]`).attr('disabled', false);
        $(`#${elementToken}`).remove();
    }

    function appendInvalidationHand(context) {
        var optionToken = `#evaluation_qualifier_${context}_invalidation option:selected`;
        var listToken = `#evaluation${context}_invalidation_list`;
        var hand = $(optionToken).val();

        $(optionToken).attr('disabled', true);
        
        var path = `/component/edit/evaluation/${context}/invalidation_hand/${hand}`;
        $.get(path, function(result) {
            $(listToken).append(result);
        });
    }

</script>
{% endblock %}
{% block body %}
<form action='/update' method='post'>
    <div class='gameDetails'>
        <h3>Details</h3>
        <div>
            <label for='name'>Name</label>
            <input type='text' name='name', value='{{game.html.name}}' />
        </div>

        <div>
            <label for='abbreviation'>Abbreviation</label>
            <input type='text' name='abbreviation' id='abbreviation' value='{{game.html.abbreviation}}' />    
        </div>

        <div>
            <label for='alternative_names'>Alternative Names</label>
            <input type='text' name='alternative_names' id='alternative_names' value='{{game.html.alternative_names}}' />
        </div>
    </div>

    <div class='gameDetails'>
        <h3>Structure</h3>
        <div>
            <label for='ante'>Ante</label>
            <input id='ante' name='structures[ante]' type='checkbox' {% if game.structure.ante %}checked{% endif %} />
        </div>
        
        <div>
            <label for='fixed_limit'>Fixed-limit</label>
            <input id='fixed_limit' name='structures[fixed_limit]' type='checkbox' {% if game.structure.fixed_limit %}checked{% endif %} />
        </div>
        
        <div>
            <label for='pot_limit'>Pot-limit</label>
            <input id='pot_limit' name='structures[pot_limit]' type='checkbox' {% if game.structure.pot_limit %}checked{% endif %} />
        </div>
        
        <div>
            <label for='no_limit'>No-limit</label>
            <input id='no_limit' name='structures[no_limit]' type='checkbox' {% if game.structure.no_limit %}checked{% endif %} />
        </div>
    </div>
    <div class='gameDetails'>
        <h3>Forced Bet</h3>
        <div>
            <label for='forced_bet_input'>Type</label>
            <select name='forced_bet' id='forced_bet_input'>
                <option value='ante'{% if game.forced_bet == 'ante' %}selected {% endif %}>Ante</option>
                <option value='blinds'{% if game.forced_bet == 'blinds' %}selected {% endif %}>Blinds</option>
                <option value='low_bring_in'{% if game.forced_bet == 'low_bring_in' %}selected {% endif %}>Low Bring-in</options>
                <option value='high_bring_in'{% if game.forced_bet == 'high_bring_in' %}selected {% endif %}>High Bring-in</option>
            </select>
        </div>
    </div>

    <div class='gameDetails'>
        <h3>Evaluation</h3>
        {% set evaluation = game.evaluation %}
        {% set evaluationKey = '0' %}
        {% set evaluationContext = '[0]' %}
        {% include 'partials/edit/evaluation.njk' %}
    </div>

    <div id='sections_container'>
        <h3>Sections</h3>
        <ol>
            {% asyncEach section in game.sections %}
                {% set section_index = loop.index0 %}
                {% set key = 'section_' + loop.index0 %}
                {% include 'partials/edit/section.njk' %}
            {% endeach %}
        </ol>
        <a href='#' class='add button' onclick='appendSection();'>Add section</a>
    </div>
    <input type='submit' class='save button' value='Save' />
</form>
{% endblock %}