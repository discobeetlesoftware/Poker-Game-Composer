var globals = {
    size: {
        height: 768,
        width: 1024
    },
    heights: {
        title: 0.2,
        detail: 0.1,
        sections: 0.5,
        description: 0.2,
        sectionTitles: 0.05 // inside of sections
    }
};

function defaultHeight(ratio) {
    return globals.size.height * ratio;
}

// scaling, width, height, color, outerColor, assets, path, progress, rollover, touch, 
//scrollTop, align, valign, canvasID, rollPerSecond, delay, canvasCheck, gpu, gpuObj, 
//nextFrame, nextStage, allowDefault, loadFailObj, sensors, retina, mouseMoveOutside, captureMouse, shim, maxConnections
var frame = new Frame({
    scaling: 'fit',
    width: globals.size.width,
    height: globals.size.height,
    color: light,
    outerColor: dark
});

var showBackground = false;
function attachBackground(parent, color) {
    if (showBackground) {
        const background = new Rectangle(parent.width, parent.height, color).addTo(parent).pos(0,0);
        background.type = "Region";
        background.parent.setChildIndex(background, 0);
        return background;
    }
}

var layout;

frame.on('ready', () => {
    var stage = frame.stage;
    var stageW = frame.width;
    var stageH = frame.height;

    var sectionsSize = {width: 0, height:0};
    var lastSection; var nextSection; var lastSectionBounds; var sectionXLocation = 0;

    var titleContainer = new Container(globals.size.width, defaultHeight(globals.heights.title)).addTo();
    attachBackground(titleContainer, green);

    var title = gameTitle('{{game.js.name}}', window.config.game.title).center(titleContainer);
    title.on('click', function() { zgo('/edit/{{game.js.sanitized_name}}'); });
    var detailContainer = new Container(globals.size.width, defaultHeight(globals.heights.detail)).addTo();
    attachBackground(detailContainer, yellow);

    var detailsLabel = new Label({
        text: '{{game.js.details}}',
        size: window.config.game.detail.size,
        font: window.config.game.detail.family,
        color: window.config.game.detail.color,
        labelWidth: stageW * 0.75
    }).center(detailContainer);

    var sectionsContainer = new Container(0, defaultHeight(globals.heights.sections));

    var sectionTitles = [];
    var sectionTitlePositions = [];
    var sectionBuilders = [
        {% asyncEach section in game.js.sections %}
            {% set section_index = loop.index0 %}
            {% include 'partials/canvas/section.njk' %}
        {% endeach %}
    ];

    for (var section_index = 0; section_index < sectionBuilders.length; section_index++) {
        var builder = sectionBuilders[section_index];
        nextSection = builder();
        if (lastSection == undefined) {
            lastSectionBounds = { x: 0, y: 0, width: 0, height: 0};
            sectionXLocation = 0;
        } else {
            lastSectionBounds = lastSection.getBounds(); 
            sectionXLocation += lastSectionBounds.width + config.section.horizontalSpacing;
        }
        sectionsSize.width = sectionXLocation - config.section.horizontalSpacing;
        sectionsSize.height = Math.max(sectionsSize.height, lastSectionBounds.height);
        sectionTitlePositions[section_index] = [sectionXLocation, nextSection.width];
        nextSection.pos(sectionXLocation, 0, LEFT, CENTER);
        lastSection = nextSection;
    }

    lastSectionBounds = lastSection.getBounds(); 
    sectionXLocation += lastSectionBounds.width;
    sectionsContainer.width = sectionXLocation;

    const sectionTitleConfig = window.config.section.title;
    var titleHeight = ((sectionsSize.height - sectionsContainer.height) / 2) + sectionTitleConfig.margins.bottom;
    var sectionTitlesContainer = new Container(sectionsContainer.width, titleHeight).addTo(sectionsContainer).pos(0, 0);
    for (var title_index = 0; title_index < sectionTitlePositions.length; title_index++) {
        var container = new Container(sectionTitlePositions[title_index][1], titleHeight).addTo(sectionsContainer).pos(sectionTitlePositions[title_index][0], 0);
        gameTitle(sectionTitles[title_index], sectionTitleConfig.font).addTo(container).pos(sectionTitleConfig.padding.horizontal, sectionTitleConfig.padding.vertical, sectionTitleConfig.align, sectionTitleConfig.valign);
        attachBackground(container, pink);
    }
  
    var sectionsWrapper = new Container(globals.size.width, sectionsContainer.height).addTo();
    attachBackground(sectionsWrapper, purple);
    sectionsContainer.pos(-(sectionXLocation / 2), 0, CENTER, CENTER, sectionsWrapper);

    var descriptionContainer = new Container(globals.size.width, defaultHeight(globals.heights.description)).addTo();
    attachBackground(descriptionContainer, red);

    // Layout(holder, regions, lastMargin, lastMarginMin, backgroundColor, vertical, showRegions, scalingObject, hideKey, style, group, inherit)
    layout = new Layout(
        stage, [
            { object: titleContainer, maxHeight: defaultHeight(globals.heights.title) * 100, valign: CENTER },
            { object: detailContainer, maxHeight: defaultHeight(globals.heights.detail) * 100, valign: BOTTOM },
            { object: sectionsWrapper, maxHeight: defaultHeight(globals.heights.sections) * 100, valign: CENTER },
            { object: descriptionContainer, maxHeight: defaultHeight(globals.heights.description) * 100, valign: CENTER },
        ],
        0, null, true, null
    );

    stage.update();
});

frame.on('resize', () => {
    layout.resize();
});